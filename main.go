package main

import (
	"fmt"

	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/proto"

	"github.com/gitsang/protoc-gen-example/proto/protoc_gen_example/options/v1"
)

func generateOutputFile(gen *protogen.Plugin, file *protogen.File) {
	filename := file.GeneratedFilenamePrefix + ".go"

	f := gen.NewGeneratedFile(filename, file.GoImportPath)
	f.P("// Code generated by protoc-gen-example. DO NOT EDIT.")
	f.P()

	f.P("package ", file.GoPackageName)
	f.P()
}

func main() {
	protogen.Options{}.Run(func(gen *protogen.Plugin) error {
		for _, f := range gen.Files {
			if !f.Generate {
				continue
			}

			// File Options
			if fileOpts := proto.GetExtension(f.Desc.Options(), options.E_FileOptions); fileOpts != nil {
				fmt.Printf("File %s Options: %s\n", f.Desc.Path(), fileOpts)
			}

			// Messages
			for _, msg := range f.Messages {
				// Message Options
				if msgOpts := proto.GetExtension(msg.Desc.Options(), options.E_MessageOptions); msgOpts != nil {
					fmt.Printf("Message %s Options: %s\n", msg.Desc.Name(), msgOpts)
				}

				// Fields Options
				for _, field := range msg.Fields {
					if fieldOpts := proto.GetExtension(field.Desc.Options(), options.E_FieldOptions); fieldOpts != nil {
						fmt.Printf("Field %s Options: %s\n", field.Desc.Name(), fieldOpts)
					}
				}
			}

			// Services
			for _, service := range f.Services {
				// Service Options
				if svcOpts := proto.GetExtension(service.Desc.Options(), options.E_ServiceOptions); svcOpts != nil {
					fmt.Printf("Service %s Options: %s\n", service.Desc.Name(), svcOpts)
				}

				// Method Options
				for _, method := range service.Methods {
					if methodOpts := proto.GetExtension(method.Desc.Options(), options.E_MethodOptions); methodOpts != nil {
						fmt.Printf("Method %s Options: %s\n", method.Desc.Name(), methodOpts)
					}
				}
			}

			generateOutputFile(gen, f)
		}
		return nil
	})
}
